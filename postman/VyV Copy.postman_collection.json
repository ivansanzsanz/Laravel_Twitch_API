{
	"info": {
		"_postman_id": "54d0d1e6-1999-475f-923e-ea3e97d90d96",
		"name": "VyV Copy",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "32655400"
	},
	"item": [
		{
			"name": "users con id",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test('ID is a non-empty string', function () {\r",
							"    const responseData = pm.response.json();\r",
							"    pm.expect(responseData).to.be.an('object');\r",
							"    pm.expect(responseData.id).to.exist.and.to.be.a('string').and.to.have.lengthOf.at.least(1, 'ID should not be empty');\r",
							"})\r",
							"\r",
							"pm.test('View count is a non-negative integer', function () {\r",
							"    const responseData = pm.response.json();\r",
							"    pm.expect(responseData.view_count).to.be.a('number');\r",
							"    pm.expect(responseData.view_count).to.be.at.least(0, 'View count should be non-negative');\r",
							"})\r",
							"\r",
							"pm.test('The created_at field must be in a valid date format', function () {\r",
							"    const responseData = pm.response.json();\r",
							"    pm.expect(responseData.created_at).to.match(/^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}Z$/, 'Value should be in valid date format');\r",
							"})"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "localhost/analytics/users?id=417603922",
					"host": [
						"localhost"
					],
					"path": [
						"analytics",
						"users"
					],
					"query": [
						{
							"key": "id",
							"value": "417603922"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "topsofthetops since 3",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Tamaño de JSON es 3\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(Object.keys(jsonData).length).to.eql(3);\r",
							"});\r",
							"\r",
							"pm.test(\"Campos no son nulos\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    for (var i = 0; i < jsonData.length; i++) {\r",
							"        var game = jsonData[i];\r",
							"        pm.expect(game.game_id).not.to.be.null;\r",
							"        pm.expect(game.game_name).not.to.be.null;\r",
							"        pm.expect(game.user_name).not.to.be.null;\r",
							"        pm.expect(game.total_videos).not.to.be.null;\r",
							"        pm.expect(game.total_views).not.to.be.null;\r",
							"        pm.expect(game.most_viewed_title).not.to.be.null;\r",
							"        pm.expect(game.most_viewed_views).not.to.be.null;\r",
							"        pm.expect(game.most_viewed_duration).not.to.be.null;\r",
							"        pm.expect(game.most_viewed_created_at).not.to.be.null;\r",
							"    }\r",
							"});\r",
							"\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "localhost/analytics/topsofthetops?since=3",
					"host": [
						"localhost"
					],
					"path": [
						"analytics",
						"topsofthetops"
					],
					"query": [
						{
							"key": "since",
							"value": "3"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "streams",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Al menos 3 streams no nulos\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    \r",
							"    pm.expect(jsonData.data.length).to.be.at.least(3); // Verifica que haya al menos 3 conjuntos de valores\r",
							"    \r",
							"    for (var i = 0; i < jsonData.data.length; i++) {\r",
							"        var item = jsonData.data[i];\r",
							"        pm.expect(item.user_name).not.to.be.null; // Verifica que user_name no sea nulo\r",
							"        pm.expect(item.title).not.to.be.null; // Verifica que title no sea nulo\r",
							"    }\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://localhost/analytics/streams",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"path": [
						"analytics",
						"streams"
					]
				}
			},
			"response": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					"pm.test('Response status code is 200', function () {\r",
					"    pm.response.to.have.status(200);        //200 implica que la solicitud fue recibida, entendida y aceptada\r",
					"})\r",
					"\r",
					"\r",
					"pm.test(\"Es JSON\", function () {\r",
					"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
					"});\r",
					"\r",
					"pm.test(\"Es JSON v2\", function () {\r",
					"    pm.response.to.have.jsonBody();\r",
					"});\r",
					"\r",
					"\r",
					"pm.test(\"JSON no vacio\", function () {\r",
					"    var jsonData = pm.response.json();\r",
					"\r",
					"    pm.expect(jsonData).to.not.be.empty; // JSON no vacío\r",
					"    pm.expect(Object.keys(jsonData).length).to.be.at.least(1); // al menos 1 valor devuelto (clave-valor)\r",
					"});"
				]
			}
		}
	]
}